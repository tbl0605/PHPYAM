<?php
/**
 * This file should be present only once per PHP server!
 * It should be placed apart and added to the include path of the PHP server hosting this file,
 * so every web application could share this file and use it by doing:
 * <code>require_once 'server-conf.php';</code>
 *
 * There are at least 3 ways to achieve that:
 * <ul>
 * <li>redefine the include path at application level, inside of each "index.php"
 * <code>ini_set('include_path', '/path/to/this/file');</code>
 * <li>redefine the include path at server level, inside of the "php.ini" configuration file (it's the better option)
 * <code>include_path="C:\path\to\this\file;.;C:\xampp\php\PEAR"</code>
 * <li>redefine the include path at application level, inside of each htaccess file (if you're using an Apache server)
 * <code>php_value include_path "/path/to/this/file"</code>
 * <ul>
 *
 * Main purpose of this file is to give a unique environment name (stored in constant YAM_ENVIRONNEMENT)
 * among all internal PHP servers.
 * Each web application can then host separate configuration files, one configuration file per existing PHP server,
 * and load the appropriate configuration file based on the environment name (stored in constant YAM_ENVIRONNEMENT).
 *
 * Other constants here simply help to customize the web application renderings.
 */
if (! defined('EOL')) {
    define('EOL', (PHP_SAPI == 'cli') ? PHP_EOL : '<br />');
}

/**
 * PHP Script start time.
 * It's a good place to put this here,
 * because this file should be included at first place of every "index.php" file.
 *
 * @var float $YAM_START_TIME
 */
define('YAM_START_TIME', microtime(true));

/**
 * Should we use the minified version of the css or javascript files?
 *
 * @var string $YAM_MIN
 */
define('YAM_MIN', '');
/* define('YAM_MIN', '.min'); */

/**
 * Environment name (e.g. development, production, ...).
 * This constant value will be used to retrieve the correct configuration file.
 * The configuration file should be located in the "confs/" directory of every
 * web application and named $YAM_ENVIRONNEMENT + ".php"
 *
 * @var string $YAM_ENVIRONNEMENT
 */
define('YAM_ENVIRONNEMENT', 'development-appconfig-only');

/**
 * In this demo directory, you can try 2 different ways to load the PHPYAM MVC framework and all aplication resources,
 * like controller, model or security policy classes.<br>
 * For this purpose, all aplication resources were duplicated in 2 different subdirectories.<br>
 * You can either let the \PHPYAM\core\Router class load the user MVC classes
 * (inside the application-noautoloader directory),
 * or let an external autoloader (for example generated by Composer) handle class loading (inside the
 * application-autoloader directory).<br>
 * By default, if you directly use the \PHPYAM\core\Router without extending it,
 * the router will do the MVC class loading stuff by himself, <b>all the MVC and security classes having
 * then to be defined in the global namespace</b>.
 *
 * To control the class naming & loading feature of PHPYAM, extend the class \PHPYAM\core\Router and
 * implement its \PHPYAM\core\Router::getResourceFileName($type, $resourceName) and
 * \PHPYAM\core\Router::getClassName($type, $resourceName) methods depending on your needs.
 *
 * @var bool $YAM_DEMO_USE_AUTOLOADER try the autoloader demo version when true, the non-autoloader demo version otherwise
 */
define('YAM_DEMO_USE_AUTOLOADER', true);
define('YAM_DEMO_APP_DIR', 'application-autoloader');
// Use these settings to launch the non-autoloader demo version:
//define('YAM_DEMO_USE_AUTOLOADER', false);
//define('YAM_DEMO_APP_DIR', 'application-noautoloader');
