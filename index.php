<?php
namespace PHPYAM\demo;

// Immediatly turn output buffering on (DemoRouter will later also start a new output buffer),
// so the \PHPYAM\extra\LoggerUtils instance can gracefully handle (or discard) early error messages.
if (isset($_SERVER['HTTP_ACCEPT_ENCODING']) && strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== false) {
    // Use compression when possible.
    ob_start('ob_gzhandler');
} else {
    ob_start();
}

// Load the server config.
require_once 'server-conf.php';

// Load application classes.
require_once __DIR__ . '/vendor/autoload.php';

// Load application config depending on the server config (for database connections, ...).
require_once __DIR__ . '/confs/' . YAM_ENVIRONNEMENT . '.php';

/*
 * !!! You do not need this code part on a real web server !!!
 * Following hack is only necessary to make this demo work with a php built-in web server through
 * php -S localhost:8000 index.php
 * because php built-in web servers are not able to create $_GET['route'] by themselves,
 * like Apache would do using the .htaccess file provided with this demo.
 */
if (php_sapi_name() === 'cli-server' && substr($_SERVER['REQUEST_URI'], 0, 1) === '/') {
    if (strpos($_SERVER['REQUEST_URI'], '.js', - 3) !== false) {
        header('Content-Type: text/javascript');
        readfile(__DIR__ . $_SERVER['REQUEST_URI']);
        exit();
    }
    if (strpos($_SERVER['REQUEST_URI'], '.css', - 4) !== false) {
        header('Content-Type: text/css');
        readfile(__DIR__ . $_SERVER['REQUEST_URI']);
        exit();
    }
    $_GET['route'] = substr($_SERVER['REQUEST_URI'], 1);
}

/**
 * Customized router to launch the application demo.
 *
 * @package PHPYAM\demo
 * @author Thierry BLIND
 * @version 1.0.0
 * @since 01/01/2014
 * @copyright 2014-2020 Thierry BLIND
 */
class DemoRouter extends \PHPYAM\core\Router
{

    /**
     * In this demo, you can try 2 different ways to load the PHPYAM MVC framework and all aplication resources,
     * like controller, model or security policy classes.<br>
     * For this purpose, all aplication resources were duplicated in 2 different directories.<br>
     * You can either let the \PHPYAM\core\Router class load the user MVC classes
     * (inside the application-demo-noautoloader directory),
     * or let an external autoloader (for example generated by Composer) handle class loading (inside the
     * application-demo-autoloader directory).<br>
     * By default, if you directly use the \PHPYAM\core\Router without extending it,
     * the router will do the MVC class loading stuff by himself, <b>all the MVC and security classes having
     * then to be defined in the global namespace</b>.
     *
     * To control the class naming & loading feature of PHPYAM, extend the class \PHPYAM\core\Router and
     * implement its \PHPYAM\core\Router::getResourceFileName($type, $resourceName) and
     * \PHPYAM\core\Router::getClassName($type, $resourceName) methods depending on your needs.
     *
     * @var bool try the autoloader demo version when true, the non-autoloader demo version otherwise
     */
    public $useApplicationAutoLoader = true;

    public function getResourceFileName($type, $resourceName)
    {
        if ($this->useApplicationAutoLoader) {
            // Resource will be autoloaded when necessary, so no need to load it manually
            // and no need to know its location!
            return null;
        }
        // Return file location:
        return __DIR__ . DIRECTORY_SEPARATOR . 'application-demo-noautoloader' . DIRECTORY_SEPARATOR . $type . DIRECTORY_SEPARATOR . strtolower($resourceName) . '.php';
    }

    public function getClassName($type, $resourceName)
    {
        if ($this->useApplicationAutoLoader) {
            return '\\PHPYAM\\demo\\application\\' . $type . '\\' . strtolower($resourceName);
        }
        // In this demo, all classes are in global scope:
        return '\\' . $resourceName;
    }
}

// Start the application.
new DemoRouter();
